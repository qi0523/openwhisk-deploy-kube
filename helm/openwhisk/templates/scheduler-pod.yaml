#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{- if .Values.scheduler.enable }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-scheduler
  labels:
    name: {{ .Release.Name }}-scheduler
{{ include "openwhisk.label_boilerplate" . | indent 4 }}
spec:
  serviceName: {{ .Release.Name }}-scheduler
  podManagementPolicy: "Parallel"
  replicas: {{ .Values.scheduler.replicaCount }}
  selector:
    matchLabels:
      name: {{ .Release.Name }}-scheduler
  template:
    metadata:
      labels:
        name: {{ .Release.Name }}-scheduler
{{ include "openwhisk.label_boilerplate" . | indent 8 }}

      {{- if .Values.metrics.prometheusEnabled }}
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port:   '{{ .Values.scheduler.port }}'
      {{- end }}

    spec:
      serviceAccountName: {{ .Release.Name }}-core
      restartPolicy: {{ .Values.scheduler.restartPolicy }}

      {{- if .Values.affinity.enabled }}
      affinity:
{{ include "openwhisk.affinity.core" . | indent 8 }}
{{ include "openwhisk.affinity.selfAntiAffinity" ( printf "%s-scheduler" .Release.Name ) | indent 8 }}
      {{- end }}

      {{- if .Values.toleration.enabled }}
      tolerations:
{{ include "openwhisk.toleration.core" . | indent 8 }}
      {{- end }}

      initContainers:
      # The scheduler must wait for kafka and/or couchdb to be ready before it starts
{{ include "openwhisk.readiness.waitForController" . | indent 6 }}
{{ include "openwhisk.docker.imagePullSecrets" . | indent 6 }}
      nodeName: master
      containers:
      - name: scheduler
        imagePullPolicy: {{ .Values.scheduler.imagePullPolicy | quote }}
        image: "{{- .Values.docker.registry.name -}}{{- .Values.scheduler.imageName -}}:{{- .Values.scheduler.imageTag -}}"
        command: ["/bin/bash", "-c", "/init.sh `hostname | awk -F '-' '{print $NF}'`"]
        resources:
          limits:
            cpu: "2"
        ports:
        - name: scheduler
          containerPort: {{ .Values.scheduler.port }}
        - containerPort: 13002
          hostPort: 13002
        - name: rpc
          containerPort: {{ .Values.scheduler.rpcPort }}
        - name: akka-remoting
          containerPort: 25520
        - name: akka-mgmt-http
          containerPort: 19999
        livenessProbe:
          httpGet:
            path: "/ping"
            port: {{ .Values.scheduler.port }}
            scheme: "HTTP"
          initialDelaySeconds: {{ .Values.probes.scheduler.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.probes.scheduler.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.probes.scheduler.livenessProbe.timeoutSeconds }}
        readinessProbe:
          httpGet:
            path: "/ping"
            port: {{ .Values.scheduler.port }}
            scheme: "HTTP"
          initialDelaySeconds: {{ .Values.probes.scheduler.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.probes.scheduler.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.probes.scheduler.readinessProbe.timeoutSeconds }}
        env:
        - name: "PORT"
          value: {{ .Values.scheduler.port | quote }}

        - name: "Q_P_S"
          value: {{ .Values.scheduler.qps | quote }}

        - name: "HOST_IP"
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP

        - name: "WHISK_SCHEDULER_ENDPOINTS_RPCPORT"
          value: {{ .Values.scheduler.rpcPort | quote }}

        - name: "WHISK_SCHEDULER_ENDPOINTS_AKKAPORT"
          value: "25520"

        - name: "TZ"
          value: {{ .Values.docker.timezone | quote }}

        - name:  "CONFIG_whisk_info_date"
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-whisk.config
              key: whisk_info_date
        - name: "CONFIG_whisk_info_buildNo"
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-whisk.config
              key: whisk_info_buildNo

        # Java options
        - name: "JAVA_OPTS"
          value: "-Xmx{{- .Values.scheduler.jvmHeapMB -}}M -XX:ActiveProcessorCount={{- .Values.scheduler.cpu -}} {{ .Values.scheduler.jvmOptions }}"

        # specific scheduler arguments
        - name: "SCHEDULER_OPTS"
          value: "{{ .Values.scheduler.options }}"

        # Action limits
{{ include "openwhisk.limitsEnvVars" . | indent 8 }}

        - name: "CONFIG_whisk_durationChecker_timeWindow"
          value: {{ .Values.whisk.durationChecker.timeWindow }}

        - name: "CONFIG_whisk_fraction_managedFraction"
          value: {{ .Values.whisk.fraction.managedFraction | quote }}

        - name: "CONFIG_whisk_fraction_blackboxFraction"
          value: {{ .Values.whisk.fraction.blackboxFraction | quote }}

        - name: "CONFIG_whisk_loadbalancer_blackboxFraction"
          value: {{ .Values.whisk.loadbalancer.blackboxFraction | quote }}

        - name: "CONFIG_whisk_loadbalancer_timeoutFactor"
          value: {{ .Values.whisk.loadbalancer.timeoutFactor | quote }}

        # Kafka properties
        - name: "KAFKA_HOSTS"
          value: "{{ include "openwhisk.kafka_connect" . }}"
{{ include "openwhisk.kafkaConfigEnvVars" . | indent 8 }}

        # etcd properties
        - name: "CONFIG_whisk_etcd_hosts"
          value: {{ include "openwhisk.etcd_host" . }}:{{ .Values.etcd.port }}

        - name: "CONFIG_whisk_etcd_lease_timeout"
          value: {{ .Values.etcd.lease_timeout | quote }}

        - name: "CONFIG_whisk_etcd_pool_threads"
          value: {{ .Values.etcd.pool_threads | quote }}

        # properties for zookeeper connection
        - name: "ZOOKEEPER_HOSTS"
          value: "{{ include "openwhisk.zookeeper_connect" . }}"

        # action runtimes
        - name: "RUNTIMES_MANIFEST"
          value: {{ template "openwhisk.runtimes_manifest" . }}

          # properties for DB connection
{{ include "openwhisk.dbEnvVars" . | indent 8 }}

        - name: "WHISK_SCHEDULER_ENDPOINTS_HOST"
          valueFrom:
            fieldRef:
              fieldPath: status.podIP

        - name: "CONFIG_whisk_scheduler_p2pManager_remoteRegistryUrl"
          value: {{ .Values.scheduler.p2pManager.remoteRegistryUrl | quote }}

        - name: "CONFIG_whisk_scheduler_p2pManager_dlclCurrent"
          value: {{ .Values.scheduler.p2pManager.dlclCurrent | quote }}
        
        - name: "CONFIG_whisk_scheduler_p2pManager_actionName"
          value: {{ .Values.scheduler.p2pManager.actionName | quote }}
        
        - name: "CONFIG_whisk_scheduler_p2pManager_count"
          value: {{ .Values.scheduler.p2pManager.count | quote }}

        - name: "CONFIG_whisk_scheduler_scheduling_concurrency"
          value: {{ .Values.whisk.scheduler.scheduling.concurrency | quote }}

        - name: "CONFIG_whisk_spi_P2PManagerProvider"
          value: {{ .Values.scheduler.P2PManagerProvider | quote }}

        - name: "CONFIG_whisk_scheduler_dataManagementService_retryInterval"
          value: {{ .Values.scheduler.dataManagementService.retryInterval | quote }}

        - name: "CONFIG_whisk_scheduler_queueManager_maxSchedulingTime"
          value: {{ .Values.scheduler.queueManager.maxSchedulingTime | quote }}

        - name: "CONFIG_whisk_scheduler_queueManager_maxRetriesToGetQueue"
          value: {{ .Values.scheduler.queueManager.maxRetriesToGetQueue | quote }}

        - name: "CONFIG_whisk_scheduler_queue_idleGrace"
          value: {{ .Values.scheduler.queue.idleGrace | quote }}

        - name: "CONFIG_whisk_scheduler_queue_stopGrace"
          value: {{ .Values.scheduler.queue.stopGrace | quote }}
                
        - name: "CONFIG_whisk_scheduler_queue_flushGrace"
          value: {{ .Values.scheduler.queue.flushGrace | quote }}

        - name: "CONFIG_whisk_scheduler_queue_gracefulShutdownTimeout"
          value: {{ .Values.scheduler.queue.gracefulShutdownTimeout | quote }}

        - name: "CONFIG_whisk_scheduler_queue_maxRetentionSize"
          value: {{ .Values.scheduler.queue.maxRetentionSize | quote }}

        - name: "CONFIG_whisk_scheduler_queue_maxRetentionMs"
          value: {{ .Values.scheduler.queue.maxRetentionMs | quote }}

        - name: "CONFIG_whisk_scheduler_queue_throttlingFraction"
          value: {{ .Values.scheduler.queue.throttlingFraction | quote }}

        - name: "CONFIG_whisk_scheduler_queue_durationBufferSize"
          value: {{ .Values.scheduler.queue.durationBufferSize | quote }}

        - name: "CONFIG_whisk_scheduler_protocol"
          value: {{ .Values.scheduler.protocol | quote }}

        - name: "CONFIG_whisk_scheduler_maxPeek"
          value: {{ .Values.scheduler.maxPeek | quote }}

        - name: "CONFIG_whisk_scheduler_inProgressJobRetention"
          value: {{ .Values.scheduler.inProgressJobRetention | quote }}

        - name: "SCHEDULER_INSTANCES"
          value: {{ .Values.scheduler.replicaCount | quote }}

{{- if .Values.metrics.prometheusEnabled }}
        - name: "OPENWHISK_ENCODED_CONFIG"
          value: {{ template "openwhisk.whiskconfig" . }}
{{- end }}
{{ if or .Values.metrics.kamonEnabled .Values.metrics.prometheusEnabled }}
        - name: "METRICS_KAMON"
          value: "true"
{{ end }}
{{ if .Values.metrics.kamonTags }}
        - name: "METRICS_KAMON_TAGS"
          value: "true"
{{ end }}
{{ if .Values.metrics.userMetricsEnabled }}
        - name: "CONFIG_whisk_userEvents_enabled"
          value: "true"
{{ end }}
        - name: "CONFIG_logback_log_level"
          value: "{{ .Values.scheduler.loglevel }}"
{{- if eq .Values.activationStoreBackend "ElasticSearch" }}
        - name: "CONFIG_whisk_activationStore_elasticsearch_protocol"
          value: "{{ .Values.elasticsearch.protocol }}"
        - name: "CONFIG_whisk_activationStore_elasticsearch_hosts"
          value: {{ template "openwhisk.elasticsearch_connect" . }}
        - name: "CONFIG_whisk_activationStore_elasticsearch_indexPattern"
          value: {{ .Values.elasticsearch.indexPattern }}
        - name: "CONFIG_whisk_activationStore_elasticsearch_username"
          value: "{{ .Values.elasticsearch.username }}"
        - name: "CONFIG_whisk_activationStore_elasticsearch_password"
          value: "{{ .Values.elasticsearch.password }}"
        - name: "CONFIG_whisk_spi_ActivationStoreProvider"
          value: "org.apache.openwhisk.core.database.elasticsearch.ElasticSearchActivationStoreProvider"
{{- end }}
{{- end }}
